import pickle
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt




VariableList = ['PriceMoMRev_TotRet1D', 'PriceMoMRev_TotRet5D',
'PriceMoMRev_TotRet21D', 'PriceMoMRev_TotRet252D',
'PriceMoMRev_TotRet12M-1M', 'PriceMoMRev_TotRet1260D',
'PriceMoMRev_Lottery', 'PriceMoMRev_vol_volume21D',
'PriceMoMRev_Price-to-52 week high', 'Tech_Realized vol, 1Y',
'Tech_Skewness, 1Y', 'Tech_MAcrossover, 15W-36W, 1Y',
'Tech_CAPM_beta, 5Y monthly',
'Tech_CAPM_idosyncratic_vol, 1Y daily', 'Tech_Kurtosis, 1Y',
'Tech_FloatTurnover, 12M', 'Tech_Log capitalization',
'Growth_EPSGrowth', 'Value_PE', 'Value_PS', 'Value_PCF', 'Value_PB']


with open('All_Combine_all.pickle', 'rb') as handle:
  All_Combine = pickle.load(handle)

Data = All_Combine['600000']

Var = Data[VariableList]
Target = Data['target_monthly']
Sign = pd.DataFrame([1]*len(VariableList),index=VariableList)
Sign.ix[['PriceMoMRev_Lottery','PriceMoMRev_vol_volume21D','Tech_Realized vol, 1Y',
      'Tech_Skewness, 1Y', 'Tech_CAPM_beta, 5Y monthly', 'Tech_CAPM_idosyncratic_vol, 1Y daily',
      'Tech_Kurtosis, 1Y', 'Tech_FloatTurnover, 12M', 'Value_PE', 'Value_PS', 'Value_PCF',
      'Value_PB']] = -1

# print Var.corrwith(Target)
Perform = pd.DataFrame(np.random.randn(len(VariableList), 4),index=VariableList,
                       columns=['PnL', 'IC', 'SR', 'Turnover'])
PerformMat = pd.DataFrame(np.random.randn(len(VariableList), 3),index=VariableList,
                       columns=['Low','Med','High'])
NTrain = 120
LevLimit = 1

for Iter in VariableList:
  AllVar = pd.DataFrame()
  Target = pd.DataFrame()
  Price = pd.DataFrame()
  for Iter2 in All_Combine.keys():
    AllVar[Iter2] = All_Combine[Iter2][Iter]
    Target[Iter2] = All_Combine[Iter2]['target_monthly']
    Price[Iter2] = All_Combine[Iter2]['Close']
    Target.fillna(0,inplace=True)
  Weight = AllVar.ix[0:NTrain,].copy()
  PnL = AllVar.iloc[0:NTrain,0].copy()
  Ret = PnL.copy()
  IC = AllVar.iloc[0:NTrain,0].copy()
  Capital = AllVar.iloc[0:NTrain,0].copy()
  Capital.ix[0,] = 100
  PriceMatrix = np.zeros((NTrain,3))
  for rowID in range(0,NTrain):
    Index = np.argsort(AllVar.ix[rowID,Price.ix[rowID,].notnull()])
    SortIndex = AllVar.ix[rowID,Price.ix[rowID,].notnull()].index[Index]
    N = int(len(Index)/3)
    Weight.ix[rowID,] = 0
    Weight.ix[rowID,SortIndex[:N]] = -1
    Weight.ix[rowID,SortIndex[-N:]] = 1
    Weight.ix[rowID,] = Weight.ix[rowID,] * Sign.ix[Iter,0]
    PriceMatrix[rowID,0] = np.mean(Target.ix[rowID,SortIndex[:N]])
    PriceMatrix[rowID,1] = np.mean(Target.ix[rowID,SortIndex[N:-N]])
    PriceMatrix[rowID,2] = np.mean(Target.ix[rowID,SortIndex[-N:]])
    Adj = LevLimit*Capital.ix[rowID]/sum(abs(Price.ix[rowID,].fillna(0))*abs(Weight.ix[rowID,]))
    Weight.ix[rowID,] = Weight.ix[rowID,]*Adj
    PnL.ix[rowID] = sum(Weight.ix[rowID,]*Target.ix[rowID,])
    IC.ix[rowID] = np.sqrt(1)*pd.DataFrame({'A' : AllVar.ix[rowID,].values.flatten(),
      'B' : Target.ix[rowID,].values.flatten()}).corr(method='spearman').ix[0,1]
    Ret.ix[rowID] = PnL.ix[rowID]/Capital.ix[rowID,]
    if rowID < NTrain-1:
      Capital.ix[rowID+1] = Capital.ix[rowID] + PnL.ix[rowID]

  #
  # plt.interactive(False)
  # plt.plot(PnL.index, cumPnL, 'ro')
  # plt.title(Iter)
  # plt.show()


  # plt.interactive(False)
  # plt.plot(PriceMatrix.mean(0), 'ro')
  # plt.title(Iter)
  # plt.show()

  Perform.ix[Iter,'PnL'] = Capital.ix[-1]/100-1
  Perform.ix[Iter,'Turnover'] = abs(Weight.diff()).sum().sum()
  Perform.ix[Iter,'IC'] = np.mean(IC)
  Perform.ix[Iter,'SR'] = np.mean(Ret) / np.std(Ret)
  PerformMat.ix[Iter,] = np.mean(PriceMatrix,axis=0)

print Perform
print PerformMat

# Simple Linear Model where factors are norm inv rank values
import scipy.stats as ss
from scipy.stats import norm
RankedVar = {}
NormVar = {}
for Iter in VariableList:
  AllVar = pd.DataFrame()
  for Iter2 in All_Combine.keys():
    AllVar[Iter2] = All_Combine[Iter2][Iter]
  InvVar = AllVar.copy()
  for rowID in range(AllVar.shape[0]):
    tmp = ss.mstats.rankdata(np.ma.masked_invalid(AllVar.ix[rowID,]))
    tmp[tmp == 0] = np.nan
    AllVar.ix[rowID,] = tmp/(len(AllVar.ix[rowID,AllVar.ix[rowID,].notnull()])+1)
    InvVar.ix[rowID,] = norm.ppf(AllVar.ix[rowID,])
  RankedVar[Iter] = AllVar
  NormVar[Iter] = AllVar

XXX = {}
from sklearn.ensemble import ExtraTreesClassifier
AllNormVar = pd.DataFrame()
for Iter in VariableList:
  AllNormVar[Iter] = np.asarray(NormVar[Iter].ix[0:NTrain,].as_matrix()).flatten()

Target = pd.DataFrame()
Price = pd.DataFrame()
MCap = pd.DataFrame()
for Iter2 in All_Combine.keys():
  Target[Iter2] = All_Combine[Iter2]['target_monthly']
  Price[Iter2] = All_Combine[Iter2]['Close']
  MCap[Iter2] = All_Combine[Iter2]['MarketCap']
# Target.fillna(0,inplace=True)
MCap.fillna(0,inplace=True)

# use LASSO and BIC for Var Selection
from sklearn.linear_model import Lasso, LassoCV, LassoLarsCV, LassoLarsIC
AllX = AllNormVar
AllY = np.asarray(Target.ix[0:NTrain,].as_matrix()).flatten()

masked = ~(np.isnan(AllX).any(axis=1))&~np.isnan(AllY)
X = AllX.loc[masked];Y = AllY[np.array(masked)]

model_bic = LassoLarsIC(criterion='bic')
model_bic.fit(X, Y)

model_cv = LassoCV()
model_cv.fit(X, Y)

model1 = Lasso(alpha=model_bic.alpha_)
model1.fit(X, Y)

model = Lasso(alpha=model_cv.alpha_)
model.fit(X, Y)

# clf = ExtraTreesClassifier()
# clf = clf.fit(X, Y)

Var1 = [val for (idx, val) in enumerate(VariableList) if np.abs(model.coef_[idx])>1e-10]
Var2 = [val for (idx, val) in enumerate(VariableList) if np.abs(model1.coef_[idx])>1e-10]
Var3 = [val for (idx, val) in enumerate(Perform.index) if np.abs(Perform.ix[val,'IC'])>0.02]

from sklearn.ensemble import ExtraTreesRegressor, RandomForestRegressor, GradientBoostingRegressor, ExtraTreesClassifier
from sklearn.grid_search import GridSearchCV, ParameterGrid
from sklearn.metrics import mean_squared_error
from sklearn import cross_validation

# make forecast one month ahead and update model
Pf2 = []
Weight = AllVar.ix[NTrain:,].copy()
Capital = AllVar.iloc[NTrain:,0].copy()
Capital.ix[0,] = 100
PnL = AllVar.iloc[NTrain:,0].copy()
Ret = PnL.copy()
for rowID in range(NTrain,Target.shape[0]):
  AllNormVar = pd.DataFrame()
  AllNormVarTest = pd.DataFrame()
  for Iter in VariableList:
    AllNormVar[Iter] = np.asarray(NormVar[Iter].ix[0:rowID,].as_matrix()).flatten()
    AllNormVarTest[Iter] = np.asarray(NormVar[Iter].ix[rowID,].as_matrix()).flatten()
  AllY = np.asarray(Target.ix[0:rowID,].as_matrix()).flatten()
  masked = ~(np.isnan(AllNormVar).any(axis=1))&~np.isnan(AllY)
  X = AllNormVar.loc[masked];Y = AllY[np.array(masked)]
  YTest = np.asarray(Target.ix[rowID,].as_matrix()).flatten()
  masked = ~(np.isnan(AllNormVarTest).any(axis=1))
  TeX = AllNormVarTest.loc[masked]

  model_bic = LassoLarsIC(criterion='bic')
  model_bic.fit(X, Y)
  model1 = Lasso(alpha=model_bic.alpha_)
  model1.fit(X, Y)
  PredY0 = model1.predict(X)
  PredY = 0*YTest
  PredY[np.array(masked)] = model1.predict(TeX)

  # ExtraTreeRegressor
  # parameters = list(ParameterGrid({'max_features': ('auto', 'log2'), 'max_depth': [1, 2, 3, 4, 5, 10, 20, 50, None]}))
  # k_fold = cross_validation.KFold(n=len(Y), n_folds=5)
  # BstPara = None
  # BstScore = 1e5
  # for para in parameters:
  #     Score = 0
  #     for train_indices, test_indices in k_fold:
  #         TrX = X.ix[train_indices,]; TrY = Y[train_indices]
  #         TeX = X.ix[test_indices,]; TeY = Y[test_indices]
  #         clf1 = ExtraTreesRegressor(random_state=0, max_depth=para['max_depth'],max_features=para['max_features'])
  #         clf1.fit(TrX,TrY)
  #         PeY = clf1.predict(TeX)
  #         Score += np.sqrt(mean_squared_error(TeY,PeY))
  #     if Score < BstScore:
  #         BstScore = Score
  #         BstPara = para
  # clf = ExtraTreesRegressor(random_state=0, max_depth=BstPara['max_depth'],max_features=BstPara['max_features'])

  # RandomForestRegressor
  # parameters = list(ParameterGrid({'max_features': ('auto', 'log2'), 'max_depth': [20, 50, None],
  #                                  'n_estimators': [50, 100, 200, 500, 700, 1000, 2000]}))
  # k_fold = cross_validation.KFold(n=len(Y), n_folds=5)
  # BstPara = None
  # BstScore = 1e5
  # for para in parameters:
  #     Score = 0
  #     for train_indices, test_indices in k_fold:
  #         TrX = X.ix[train_indices,]; TrY = Y[train_indices]
  #         TeX = X.ix[test_indices,]; TeY = Y[test_indices]
  #         clf1 = RandomForestRegressor(random_state=1, max_depth=para['max_depth'], max_features=para['max_features'],
  #                                      n_estimators=para['n_estimators'])
  #         clf1.fit(TrX,TrY)
  #         PeY = clf1.predict(TeX)
  #         Score += np.sqrt(mean_squared_error(TeY,PeY))
  #     if Score < BstScore:
  #         BstScore = Score
  #         BstPara = para
  # clf = RandomForestRegressor(random_state=1, max_depth=BstPara['max_depth'], max_features=BstPara['max_features'],
  #                             n_estimators=BstPara['n_estimators'])
  # clf.fit(X,Y)
  # PredY0 = clf.predict(X)
  # PredY = clf.predict(AllNormVarTest)



  # clf = GradientBoostingRegressor(random_state=1)

  # Weight.ix[rowID-NTrain,] = PredY
  # LThresh = np.percentile(PredY, 33)
  # HThresh = np.percentile(PredY, 67)
  # Weight.ix[rowID-NTrain,PredY <= HThresh] = 0
  # clmID = np.isnan(Weight.ix[rowID - NTrain,])
  # Weight.ix[rowID - NTrain,clmID] = 0
  # # no short sell
  # clmID = Weight.ix[rowID-NTrain,]<0
  # Weight.ix[rowID - NTrain,clmID] = 0

  # only invest in best stock
  Weight.ix[rowID-NTrain,] = 0
  Index = PredY.tolist().index(np.nanmax(PredY))
  Weight.ix[rowID-NTrain,Index] = 1


  #  #### classification of top 1/3 bot 1/3
  # Index = np.argsort(Y)
  # N = int(len(Index) * 0.3)
  # Y1 = np.zeros((len(Y),1))
  # Y1[Index[:N]] = -1
  # Y1[Index[-N:]] = 1
  #
  # clf = ExtraTreesClassifier(random_state=0)
  # clf.fit(X,Y1)
  # PredY0 = clf.predict(X)
  # PredY = clf.predict(AllNormVarTest)
  #
  # Weight.ix[rowID-21,] = PredY
  # # no short sell
  # # clmID = Weight.ix[rowID-21,]<0
  # # Weight.ix[rowID - 21,clmID] = 0


  # Weight.ix[rowID-21,] = 0
  # Weight.ix[rowID-21,Index[:N]] = -1
  # Weight.ix[rowID-21,Index[-N:]] = 1
  Weight.ix[rowID-NTrain,Price.ix[rowID,].isnull()] = 0
  Adj = LevLimit*Capital.ix[rowID-NTrain]/sum(abs(Price.ix[rowID,].fillna(0))*abs(Weight.ix[rowID-NTrain,]))
  Weight.ix[rowID-NTrain,] = Weight.ix[rowID-NTrain,]*Adj
  PnL.ix[rowID-NTrain] = np.nansum(Weight.ix[rowID-NTrain,]*Target.ix[rowID,]*Price.ix[rowID,])
  Ret.ix[rowID-NTrain] = PnL.ix[rowID-NTrain]/Capital.ix[rowID-NTrain,]
  if rowID < (Target.shape[0]-1):
    Capital.ix[rowID-NTrain+1] = Capital.ix[rowID-NTrain] + PnL.ix[rowID-NTrain]

  masked = ~np.isnan(YTest)&~np.isnan(PredY)
  masked1 = ~np.isnan(Y)&~np.isnan(PredY0)

  Pf2.append([ss.spearmanr(YTest[masked],PredY[masked])[0], ss.spearmanr(Y[masked1],PredY0[masked1])[0], Ret.ix[rowID-NTrain]])
  print Weight.columns.values[Index], Target.ix[rowID,Index]

print np.nanmean(Pf2,axis=0), np.nanstd(Pf2,axis=0)
print Pf2
print Weight.index
print Capital
