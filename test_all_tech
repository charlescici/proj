__author__ = 'Peto'

import pickle
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# from stepwise_selection import forward_selected


VariableList = ['PriceMoMRev_TotRet1D', 'PriceMoMRev_TotRet5D',
'PriceMoMRev_TotRet21D', 'PriceMoMRev_TotRet252D',
'PriceMoMRev_TotRet12M-1M', 'PriceMoMRev_TotRet1260D',
'PriceMoMRev_Lottery', 'PriceMoMRev_vol_volume21D',
'PriceMoMRev_Price-to-52 week high', 'Tech_Realized vol, 1Y',
'Tech_Skewness, 1Y', 'Tech_MAcrossover, 15W-36W, 1Y',
'Tech_CAPM_beta, 5Y monthly',
'Tech_CAPM_idosyncratic_vol, 1Y daily', 'Tech_Kurtosis, 1Y',
'Tech_FloatTurnover, 12M', 'Tech_Log capitalization',
'Growth_EPSGrowth', 'Value_PE', 'Value_PS', 'Value_PCF', 'Value_PB', 'Tech_RSI10D','Tech_RSI30D','Tech_TotRet3M',
'Tech_TotRet6M','Tech_Ret12M_Vol_Adj','Tech_3MPriceAcc',
'Tech_6MPriceAcc','Normura_TotRet6M-1M','Normura_TotRet3Y','Normura_Realized vol, 3Y','Normura_Average Daily Traded Value, 21D',
'Normura_1M_Volume-3M_Volume','Normura_1M_Volume/ShareOutstanding','Normura_EP/3MEP','Normura_EP/3MEPstd','Normura_FloatPct',
'PriceMoMRev_reverseLottery']
VariableList = ['PriceMoMRev_TotRet1D', 'PriceMoMRev_TotRet5D',
'PriceMoMRev_TotRet21D', 'PriceMoMRev_TotRet252D',
'PriceMoMRev_TotRet12M-1M', 'PriceMoMRev_TotRet1260D',
'PriceMoMRev_Lottery', 'PriceMoMRev_vol_volume21D',
'PriceMoMRev_Price-to-52 week high', 'Tech_Realized vol, 1Y',
'Tech_Skewness, 1Y', 'Tech_MAcrossover, 15W-36W, 1Y',
'Tech_CAPM_beta, 5Y monthly',
'Tech_CAPM_idosyncratic_vol, 1Y daily', 'Tech_Kurtosis, 1Y',
'Tech_FloatTurnover, 12M', 'Tech_Log capitalization',
'Value_PE', 'Value_PS', 'Value_PCF', 'Value_PB', 'Tech_RSI10D','Tech_RSI30D','Tech_TotRet3M',
'Tech_TotRet6M','Tech_Ret12M_Vol_Adj','Tech_3MPriceAcc',
'Tech_6MPriceAcc','Normura_TotRet6M-1M','Normura_TotRet3Y','Normura_Realized vol, 3Y','Normura_Average Daily Traded Value, 21D',
'Normura_1M_Volume-3M_Volume','Normura_1M_Volume/ShareOutstanding','Normura_EP/3MEP','Normura_EP/3MEPstd','Normura_FloatPct',
'PriceMoMRev_reverseLottery']

with open('All_Combine_all_20160513.pickle', 'rb') as handle:
  All_Combine = pickle.load(handle)

Data = All_Combine['600000']

Var = Data[VariableList]
Target = Data['target_monthly']
Sign = pd.DataFrame([1]*len(VariableList),index=VariableList)
# Sign.ix[['PriceMoMRev_Lottery','PriceMoMRev_vol_volume21D','Tech_Realized vol, 1Y',
#       'Tech_Skewness, 1Y', 'Tech_CAPM_beta, 5Y monthly', 'Tech_CAPM_idosyncratic_vol, 1Y daily',
#       'Tech_Kurtosis, 1Y', 'Tech_FloatTurnover, 12M', 'Value_PE', 'Value_PS', 'Value_PCF',
#       'Value_PB']] = -1

Perform = pd.DataFrame(np.random.randn(len(VariableList), 7),index=VariableList,
                       columns=['HitRate', 'IC', 'SR', 'Turnover', 'Avg Stocks', 'AvgRet L/S','stdRet L/S'])
PerformMat = pd.DataFrame(np.random.randn(len(VariableList), 7),index=VariableList,
                       columns=['1','2','3','4','5','All','L/S'])
NTrain = 120
LevLimit = 1

# for Iter in VariableList:
#   AllVar = pd.DataFrame()
#   Target = pd.DataFrame()
#   Price = pd.DataFrame()
#   for Iter2 in All_Combine.keys():
#     AllVar[Iter2] = All_Combine[Iter2][Iter]
#     Target[Iter2] = All_Combine[Iter2]['target_monthly']
#     Price[Iter2] = All_Combine[Iter2]['Close']
#   Weight = AllVar.ix[0:NTrain,].copy()
#   IC = AllVar.iloc[0:NTrain,0].copy()
#   Ret = AllVar.ix[0:NTrain,0:7].copy()
#   Ret.columns = PerformMat.columns
#   PnL, HitRate = Ret.copy(), Ret.copy(),
#   Capital = AllVar.ix[0:NTrain+1,0:7].copy()
#   Capital.columns = PerformMat.columns
#   NStock, Turnover = IC.copy(), IC.copy()
#   Turnover.ix[0,] = 0
#   Capital.ix[0,] = 100
#   PriceMatrix = np.zeros((NTrain,7))
#   for rowID in range(0,NTrain):
#     # print rowID, Iter
#     # filter out Target is nan or price is nan (Target may include price as cannot calculate target without price)
#     clmID = Target.ix[rowID,].notnull()
#     Index = np.argsort(AllVar.ix[rowID,clmID])
#     SortIndex = AllVar.ix[rowID,clmID].index[Index]
#     N = int(len(Index)/5.0)
#     Weight.ix[rowID,] = 0
#     for jj in range(0,5):
#       Weight.ix[rowID,SortIndex[jj*N:(jj+1)*N]] = jj+1
#     Weight.ix[rowID,SortIndex[5*N:]] = 5
#     for jj in range(1,6):
#       PriceMatrix[rowID,jj-1] = np.mean(Target.ix[rowID,Weight.ix[rowID,]==jj])
#       HitRate.ix[rowID,jj-1] = np.mean(Target.ix[rowID,Weight.ix[rowID,]==jj]>0)
#     PriceMatrix[rowID,5] = np.mean(PriceMatrix[rowID,0:5])
#     PriceMatrix[rowID,-1] = PriceMatrix[rowID,4] - PriceMatrix[rowID,0]
#     HitRate.ix[rowID,-1] = (HitRate.ix[rowID,4] - HitRate.ix[rowID,0] + 1.0)/2.0
#     PnL.ix[rowID,] = list(Capital.ix[rowID,]*PriceMatrix[rowID,])
#     IC.ix[rowID] = np.sqrt(1)*pd.DataFrame({'A' : AllVar.ix[rowID,clmID].values.flatten(),
#       'B' : Target.ix[rowID,clmID].values.flatten()}).corr(method='spearman').ix[0,1]
#     Ret.ix[rowID,] = list(PnL.ix[rowID]/Capital.ix[rowID,].values)
#     Capital.ix[rowID+1,] = Capital.ix[rowID,] + PnL.ix[rowID,]
#     NStock.ix[rowID,] = len(Index)
#     if rowID > 0:
#       clmID = Weight.ix[rowID-1,] == 1
#       Turnover.ix[rowID,] = sum(Weight.ix[rowID,clmID] != 1)/(sum(clmID)+0.0)
#
#   Perform.ix[Iter,'HitRate'] = np.mean(HitRate['L/S'])
#   Perform.ix[Iter,'Turnover'] = np.mean(Turnover)
#   Perform.ix[Iter,'IC'] = np.mean(IC)
#   Perform.ix[Iter,'Avg Stocks'] = np.mean(NStock)
#   Perform.ix[Iter,'AvgRet L/S'] = np.mean(Ret['L/S'])
#   Perform.ix[Iter,'stdRet L/S'] = np.std(Ret['L/S'])
#   Perform.ix[Iter,'SR'] = np.mean(Ret['L/S']) / np.std(Ret['L/S'])
#   PerformMat.ix[Iter,] = np.mean(PriceMatrix,axis=0)
#
# print Perform
# print PerformMat
#
# from pandas import ExcelWriter
# writer = ExcelWriter('output.xlsx')
# Perform.to_excel(writer,'Sheet1')
# PerformMat.to_excel(writer,'Sheet2')
# writer.save()
#
# print 'Finished'
#
#
# for Iter in VariableList:
#   AllVar = pd.DataFrame()
#   Target = pd.DataFrame()
#   Price = pd.DataFrame()
#   SizeVar = pd.DataFrame()
#   for Iter2 in All_Combine.keys():
#     AllVar[Iter2] = All_Combine[Iter2][Iter]
#     Target[Iter2] = All_Combine[Iter2]['target_monthly']
#     Price[Iter2] = All_Combine[Iter2]['Close']
#     SizeVar[Iter2] = All_Combine[Iter2]['MarketCap']
#   Weight = AllVar.ix[0:NTrain,].copy()
#   IC = AllVar.iloc[0:NTrain,0].copy()
#   Ret = AllVar.ix[0:NTrain,0:7].copy()
#   Ret.columns = PerformMat.columns
#   PnL, HitRate = Ret.copy(), Ret.copy(),
#   Capital = AllVar.ix[0:NTrain+1,0:7].copy()
#   Capital.columns = PerformMat.columns
#   NStock, Turnover = IC.copy(), IC.copy()
#   Turnover.ix[0,] = 0
#   Capital.ix[0,] = 100
#   PriceMatrix = np.zeros((NTrain,7))
#   for rowID in range(0,NTrain):
#     # print rowID, Iter
#     # filter out Target is nan or price is nan (Target may include price as cannot calculate target without price)
#     clmID = (Target.ix[rowID,].notnull()) & (SizeVar.ix[rowID,] < np.nanpercentile(SizeVar.ix[rowID,Target.ix[rowID,].notnull()], 50))
#     Index = np.argsort(AllVar.ix[rowID,clmID])
#     SortIndex = AllVar.ix[rowID,clmID].index[Index]
#     N = int(len(Index)/5.0)
#     Weight.ix[rowID,] = 0
#     for jj in range(0,5):
#       Weight.ix[rowID,SortIndex[jj*N:(jj+1)*N]] = jj+1
#     Weight.ix[rowID,SortIndex[5*N:]] = 5
#     for jj in range(1,6):
#       PriceMatrix[rowID,jj-1] = np.mean(Target.ix[rowID,Weight.ix[rowID,]==jj])
#       HitRate.ix[rowID,jj-1] = np.mean(Target.ix[rowID,Weight.ix[rowID,]==jj]>0)
#     PriceMatrix[rowID,5] = np.mean(PriceMatrix[rowID,0:5])
#     PriceMatrix[rowID,-1] = PriceMatrix[rowID,4] - PriceMatrix[rowID,0]
#     HitRate.ix[rowID,-1] = (HitRate.ix[rowID,4] - HitRate.ix[rowID,0] + 1.0)/2.0
#     PnL.ix[rowID,] = list(Capital.ix[rowID,]*PriceMatrix[rowID,])
#     IC.ix[rowID] = np.sqrt(1)*pd.DataFrame({'A' : AllVar.ix[rowID,clmID].values.flatten(),
#       'B' : Target.ix[rowID,clmID].values.flatten()}).corr(method='spearman').ix[0,1]
#     Ret.ix[rowID,] = list(PnL.ix[rowID]/Capital.ix[rowID,].values)
#     Capital.ix[rowID+1,] = Capital.ix[rowID,] + PnL.ix[rowID,]
#     NStock.ix[rowID,] = len(Index)
#     if rowID > 0:
#       clmID = Weight.ix[rowID-1,] == 1
#       Turnover.ix[rowID,] = sum(Weight.ix[rowID,clmID] != 1)/(sum(clmID)+0.0)
#
#   Perform.ix[Iter,'HitRate'] = np.mean(HitRate['L/S'])
#   Perform.ix[Iter,'Turnover'] = np.mean(Turnover)
#   Perform.ix[Iter,'IC'] = np.mean(IC)
#   Perform.ix[Iter,'Avg Stocks'] = np.mean(NStock)
#   Perform.ix[Iter,'AvgRet L/S'] = np.mean(Ret['L/S'])
#   Perform.ix[Iter,'stdRet L/S'] = np.std(Ret['L/S'])
#   Perform.ix[Iter,'SR'] = np.mean(Ret['L/S']) / np.std(Ret['L/S'])
#   PerformMat.ix[Iter,] = np.mean(PriceMatrix,axis=0)
#
# print Perform
# print PerformMat
#
# from pandas import ExcelWriter
# writer = ExcelWriter('output_small.xlsx')
# Perform.to_excel(writer,'Sheet1')
# PerformMat.to_excel(writer,'Sheet2')
# writer.save()
#
# print 'Small-Finished'
#
# for Iter in VariableList:
#   AllVar = pd.DataFrame()
#   Target = pd.DataFrame()
#   Price = pd.DataFrame()
#   SizeVar = pd.DataFrame()
#   for Iter2 in All_Combine.keys():
#     AllVar[Iter2] = All_Combine[Iter2][Iter]
#     Target[Iter2] = All_Combine[Iter2]['target_monthly']
#     Price[Iter2] = All_Combine[Iter2]['Close']
#     SizeVar[Iter2] = All_Combine[Iter2]['MarketCap']
#   Weight = AllVar.ix[0:NTrain,].copy()
#   IC = AllVar.iloc[0:NTrain,0].copy()
#   Ret = AllVar.ix[0:NTrain,0:7].copy()
#   Ret.columns = PerformMat.columns
#   PnL, HitRate = Ret.copy(), Ret.copy(),
#   Capital = AllVar.ix[0:NTrain+1,0:7].copy()
#   Capital.columns = PerformMat.columns
#   NStock, Turnover = IC.copy(), IC.copy()
#   Turnover.ix[0,] = 0
#   Capital.ix[0,] = 100
#   PriceMatrix = np.zeros((NTrain,7))
#   for rowID in range(0,NTrain):
#     # print rowID, Iter
#     # filter out Target is nan or price is nan (Target may include price as cannot calculate target without price)
#     clmID = (Target.ix[rowID,].notnull()) & (SizeVar.ix[rowID,] > np.nanpercentile(SizeVar.ix[rowID,Target.ix[rowID,].notnull()], 50))
#     Index = np.argsort(AllVar.ix[rowID,clmID])
#     SortIndex = AllVar.ix[rowID,clmID].index[Index]
#     N = int(len(Index)/5.0)
#     Weight.ix[rowID,] = 0
#     for jj in range(0,5):
#       Weight.ix[rowID,SortIndex[jj*N:(jj+1)*N]] = jj+1
#     Weight.ix[rowID,SortIndex[5*N:]] = 5
#     for jj in range(1,6):
#       PriceMatrix[rowID,jj-1] = np.mean(Target.ix[rowID,Weight.ix[rowID,]==jj])
#       HitRate.ix[rowID,jj-1] = np.mean(Target.ix[rowID,Weight.ix[rowID,]==jj]>0)
#     PriceMatrix[rowID,5] = np.mean(Target.ix[rowID,])
#     PriceMatrix[rowID,-1] = PriceMatrix[rowID,4] - PriceMatrix[rowID,0]
#     HitRate.ix[rowID,-1] = (HitRate.ix[rowID,4] - HitRate.ix[rowID,0] + 1.0)/2.0
#     PnL.ix[rowID,] = list(Capital.ix[rowID,]*PriceMatrix[rowID,])
#     IC.ix[rowID] = np.sqrt(1)*pd.DataFrame({'A' : AllVar.ix[rowID,clmID].values.flatten(),
#       'B' : Target.ix[rowID,clmID].values.flatten()}).corr(method='spearman').ix[0,1]
#     Ret.ix[rowID,] = list(PnL.ix[rowID]/Capital.ix[rowID,].values)
#     Capital.ix[rowID+1,] = Capital.ix[rowID,] + PnL.ix[rowID,]
#     NStock.ix[rowID,] = len(Index)
#     if rowID > 0:
#       clmID = Weight.ix[rowID-1,] == 1
#       Turnover.ix[rowID,] = sum(Weight.ix[rowID,clmID] != 1)/(sum(clmID)+0.0)
#
#   Perform.ix[Iter,'HitRate'] = np.mean(HitRate['L/S'])
#   Perform.ix[Iter,'Turnover'] = np.mean(Turnover)
#   Perform.ix[Iter,'IC'] = np.mean(IC)
#   Perform.ix[Iter,'Avg Stocks'] = np.mean(NStock)
#   Perform.ix[Iter,'AvgRet L/S'] = np.mean(Ret['L/S'])
#   Perform.ix[Iter,'stdRet L/S'] = np.std(Ret['L/S'])
#   Perform.ix[Iter,'SR'] = np.mean(Ret['L/S']) / np.std(Ret['L/S'])
#   PerformMat.ix[Iter,] = np.mean(PriceMatrix,axis=0)
#
# print Perform
# print PerformMat
#
# from pandas import ExcelWriter
# writer = ExcelWriter('output_large.xlsx')
# Perform.to_excel(writer,'Sheet1')
# PerformMat.to_excel(writer,'Sheet2')
# writer.save()
#
# print 'Large-Finished'


# Simple Linear Model where factors are norm inv rank values
import scipy.stats as ss
from scipy.stats import norm
RankedVar = {}
NormVar = {}
for Iter in VariableList:
  AllVar = pd.DataFrame()
  for Iter2 in All_Combine.keys():
    AllVar[Iter2] = All_Combine[Iter2][Iter]
  InvVar = AllVar.copy()

  for rowID in range(AllVar.shape[0]):
    # print Iter, rowID
    tmp = ss.mstats.rankdata(np.ma.masked_invalid(AllVar.ix[rowID,]))
    tmp[tmp == 0] = np.nan
    AllVar.ix[rowID,] = tmp/(len(AllVar.ix[rowID,AllVar.ix[rowID,].notnull()])+1)
    InvVar.ix[rowID,] = norm.ppf(AllVar.ix[rowID,])
  RankedVar[Iter] = AllVar
  NormVar[Iter] = AllVar

XXX = {}
from sklearn.ensemble import ExtraTreesClassifier
AllNormVar = pd.DataFrame()
for Iter in VariableList:
  AllNormVar[Iter] = np.asarray(NormVar[Iter].ix[0:NTrain,].as_matrix()).flatten()

Target = pd.DataFrame()
Price = pd.DataFrame()
MCap = pd.DataFrame()
for Iter2 in All_Combine.keys():
  Target[Iter2] = All_Combine[Iter2]['target_monthly']
  Price[Iter2] = All_Combine[Iter2]['Close']
  MCap[Iter2] = All_Combine[Iter2]['MarketCap']
# Target.fillna(0,inplace=True)
MCap.fillna(0,inplace=True)

# use LASSO and BIC for Var Selection
from sklearn.linear_model import Lasso, LassoCV, LassoLarsCV, LassoLarsIC
AllX = AllNormVar
AllY = np.asarray(Target.ix[0:NTrain,].as_matrix()).flatten()

masked = ~(np.isnan(AllX).any(axis=1))&~np.isnan(AllY)
X = AllX.loc[masked];Y = AllY[np.array(masked)]

model_bic = LassoLarsIC(criterion='bic')
model_bic.fit(X, Y)

model_cv = LassoCV()
model_cv.fit(X, Y)

model1 = Lasso(alpha=model_bic.alpha_)
model1.fit(X, Y)

model = Lasso(alpha=model_cv.alpha_)
model.fit(X, Y)

# clf = ExtraTreesClassifier()
# clf = clf.fit(X, Y)

Var1 = [val for (idx, val) in enumerate(VariableList) if np.abs(model.coef_[idx])>1e-10]
Var2 = [val for (idx, val) in enumerate(VariableList) if np.abs(model1.coef_[idx])>1e-10]
Var3 = [val for (idx, val) in enumerate(Perform.index) if np.abs(Perform.ix[val,'IC'])>0.02]

from sklearn.ensemble import ExtraTreesRegressor, RandomForestRegressor, GradientBoostingRegressor, ExtraTreesClassifier
from sklearn.grid_search import GridSearchCV, ParameterGrid
from sklearn.metrics import mean_squared_error
from sklearn import cross_validation

def forward_selected(data, response, model, kf):
    """Linear model designed by forward selection.

    Parameters:
    -----------
    data : pandas DataFrame with all possible predictors and response

    response: string, name of response column in data

    Returns:
    --------
    model: an "optimal" fitted statsmodels linear model
           with an intercept
           selected by forward selection
           evaluated by adjusted R-squared
    """
    remaining = set(data.columns)
    # remaining.remove(response)
    selected = []
    BstScore = []
    current_score, best_new_score = -np.inf, -np.inf
    while remaining:
        scores_with_candidates = []

        # forward selection
        score = 0
        for candidate in remaining:
            for train, test in kf:
                TrX = data.ix[train,selected + [candidate]]; TrY = response[train]
                TeX = data.ix[test,selected + [candidate]]; TeY = response[test]
                model.fit(TrX,TrY)
                PredY = model.predict(TeX)
                score += -np.sqrt(np.mean( (PredY-TeY)**2 ))
            scores_with_candidates.append((score, candidate))
        scores_with_candidates.sort()
        best_new_score, best_candidate = scores_with_candidates.pop()
        if current_score < best_new_score:
            remaining.remove(best_candidate)
            selected.append(best_candidate)
            current_score = best_new_score
            BstScore.append((best_new_score,selected[:]))
        else:
            break
        # print 'Forward', BstScore

        # backward elimination
        score = 0
        scores_with_candidates = []
        if len(selected) > 1:
            for candidate in selected:
                CurrentSelected = selected[:]
                CurrentSelected.remove(candidate)
                for train, test in kf:
                    TrX = data.ix[train,CurrentSelected]; TrY = response[train]
                    TeX = data.ix[test,CurrentSelected]; TeY = response[test]
                    model.fit(TrX,TrY)
                    PredY = model.predict(TeX)
                    score += -np.sqrt(np.mean( (PredY-TeY)**2 ))
                scores_with_candidates.append((score, CurrentSelected[:]))
            scores_with_candidates.sort(reverse=True)
            # print 'Backward', scores_with_candidates
            best_new_score, best_candidate = scores_with_candidates.pop()
            if current_score < best_new_score:
                remaining.add(best_candidate)
                selected.remove(best_candidate)
                current_score = best_new_score
                BstScore.append((best_new_score,selected[:]))
            # print 'after backward', BstScore

    model.fit(data[selected],response)
    return model,selected,BstScore



# make forecast one month ahead and update model
Pf2 = []
Weight = AllVar.ix[NTrain:,].copy()
Capital = AllVar.iloc[NTrain-1:,0].copy()
Capital.ix[0,] = 100
PnL = AllVar.iloc[NTrain:,0].copy()
Ret = PnL.copy()
for rowID in range(NTrain,Target.shape[0]):
  AllNormVar = pd.DataFrame()
  AllNormVarTest = pd.DataFrame()
  for Iter in VariableList:
    AllNormVar[Iter] = np.asarray(NormVar[Iter].ix[0:rowID,].as_matrix()).flatten()
    AllNormVarTest[Iter] = np.asarray(NormVar[Iter].ix[rowID,].as_matrix()).flatten()
  AllY = np.asarray(Target.ix[0:rowID,].as_matrix()).flatten()
  masked = ~(np.isnan(AllNormVar).any(axis=1))&~np.isnan(AllY)
  X = AllNormVar.loc[masked];Y = AllY[np.array(masked)]
  YTest = np.asarray(Target.ix[rowID,].as_matrix()).flatten()
  masked = ~(np.isnan(AllNormVarTest).any(axis=1))
  TeX = AllNormVarTest.loc[masked]


  model_bic = LassoLarsIC(criterion='bic')
  model_bic.fit(X, Y)
  model1 = Lasso(alpha=model_bic.alpha_)
  model1.fit(X, Y)
  PredY0 = model1.predict(X)
  PredY = 0*YTest
  PredY[np.array(masked)] = model1.predict(TeX)

  # ExtraTreeRegressor
  # parameters = list(ParameterGrid({'max_features': ('auto', 'log2'), 'max_depth': [1, 2, 3, 4, 5, 10, 20, 50, None]}))
  # k_fold = cross_validation.KFold(n=len(Y), n_folds=5)
  # BstPara = None
  # BstScore = 1e5
  # for para in parameters:
  #     Score = 0
  #     for train_indices, test_indices in k_fold:
  #         TrX = X.ix[train_indices,]; TrY = Y[train_indices]
  #         TeX = X.ix[test_indices,]; TeY = Y[test_indices]
  #         clf1 = ExtraTreesRegressor(random_state=0, max_depth=para['max_depth'],max_features=para['max_features'])
  #         clf1.fit(TrX,TrY)
  #         PeY = clf1.predict(TeX)
  #         Score += np.sqrt(mean_squared_error(TeY,PeY))
  #     if Score < BstScore:
  #         BstScore = Score
  #         BstPara = para
  # clf = ExtraTreesRegressor(random_state=0, max_depth=BstPara['max_depth'],max_features=BstPara['max_features'])

  # RandomForestRegressor
  # parameters = list(ParameterGrid({'max_features': ('auto', 'log2'), 'max_depth': [20, 50, None],
  #                                  'n_estimators': [50, 100, 200, 500, 700, 1000, 2000]}))
  # k_fold = cross_validation.KFold(n=len(Y), n_folds=5)
  # BstPara = None
  # BstScore = 1e5
  # for para in parameters:
  #     Score = 0
  #     for train_indices, test_indices in k_fold:
  #         TrX = X.ix[train_indices,]; TrY = Y[train_indices]
  #         TeX = X.ix[test_indices,]; TeY = Y[test_indices]
  #         clf1 = RandomForestRegressor(random_state=1, max_depth=para['max_depth'], max_features=para['max_features'],
  #                                      n_estimators=para['n_estimators'])
  #         clf1.fit(TrX,TrY)
  #         PeY = clf1.predict(TeX)
  #         Score += np.sqrt(mean_squared_error(TeY,PeY))
  #     if Score < BstScore:
  #         BstScore = Score
  #         BstPara = para
  # clf = RandomForestRegressor(random_state=1, max_depth=BstPara['max_depth'], max_features=BstPara['max_features'],
  #                             n_estimators=BstPara['n_estimators'])
  # clf.fit(X,Y)
  # PredY0 = clf.predict(X)
  # PredY = clf.predict(AllNormVarTest)

  # SVR
  # from sklearn import preprocessing
  # from sklearn.svm import NuSVR
  # min_max_scaler = preprocessing.MinMaxScaler(feature_range=(-1, 1))
  # X_train_minmax = min_max_scaler.fit_transform(X)
  # X_test_minmax = min_max_scaler.transform(TeX)
  # parameters = list(ParameterGrid({'nu': np.arange(0.9,1,0.01), 'kernel': ('rbf', 'linear','sigmoid'),
  #                                  'C': [10**ii for ii in np.arange(-4,1)], 'gamma': [10**ii for ii in np.arange(-4,2)]}))
  # # parameters = list(ParameterGrid({'epsilon': [10**ii for ii in range(-4,4)], 'kernel': ('rbf', 'linear','sigmoid'),
  # #                                  'C': [10**ii for ii in range(-4,4)], 'gamma': [10**ii for ii in range(-4,4)]}))
  # k_fold = cross_validation.KFold(n=len(Y), n_folds=5,random_state=4)
  # BstPara = None
  # BstScore = 1e5
  # for para in parameters:
  #     Score = 0
  #     for train_indices, test_indices in k_fold:
  #         TrX = X_train_minmax[train_indices,]; TrY = Y[train_indices]
  #         TeeX = X_train_minmax[test_indices,]; TeY = Y[test_indices]
  #         # clf1 = SVR(epsilon=para['epsilon'],kernel=para['kernel'],C=para['C'],gamma=para['gamma'])
  #         clf1 = NuSVR(nu=para['nu'],kernel=para['kernel'],C=para['C'],gamma=para['gamma'],cache_size=6000)
  #         clf1.fit(TrX,TrY)
  #         PeY = clf1.predict(TeeX)
  #         Score += np.sqrt(mean_squared_error(TeY,PeY))
  #     if Score < BstScore:
  #         BstScore = Score
  #         BstPara = para
  # # BstPara = SVMParam[rowID-21]
  # # clf = SVR(epsilon=BstPara['epsilon'],kernel=BstPara['kernel'],C=BstPara['C'],gamma=BstPara['gamma'])
  # clf = NuSVR(nu=BstPara['nu'],kernel=BstPara['kernel'],C=BstPara['C'],gamma=BstPara['gamma'],cache_size=6000)
  # clf.fit(X_train_minmax,Y)
  # PredY0 = clf.predict(X_train_minmax)
  # PredY = clf.predict(X_test_minmax)

  # clf = GradientBoostingRegressor(random_state=1)

  # Weight.ix[rowID-NTrain,] = PredY
  # LThresh = np.percentile(PredY, 33)
  # HThresh = np.percentile(PredY, 67)
  # Weight.ix[rowID-NTrain,PredY <= HThresh] = 0
  # clmID = np.isnan(Weight.ix[rowID - NTrain,])
  # Weight.ix[rowID - NTrain,clmID] = 0
  # # no short sell
  # clmID = Weight.ix[rowID-NTrain,]<0
  # Weight.ix[rowID - NTrain,clmID] = 0

  # only invest in best stock
  Weight.ix[rowID-NTrain,] = 0
  Index = PredY.tolist().index(np.nanmax(PredY))
  Weight.ix[rowID-NTrain,Index] = 1


  #  #### classification of top 1/3 bot 1/3
  # Index = np.argsort(Y)
  # N = int(len(Index) * 0.3)
  # Y1 = np.zeros((len(Y),1))
  # Y1[Index[:N]] = -1
  # Y1[Index[-N:]] = 1
  #
  # clf = ExtraTreesClassifier(random_state=0)
  # clf.fit(X,Y1)
  # PredY0 = clf.predict(X)
  # PredY = clf.predict(AllNormVarTest)
  #
  # Weight.ix[rowID-21,] = PredY
  # # no short sell
  # # clmID = Weight.ix[rowID-21,]<0
  # # Weight.ix[rowID - 21,clmID] = 0

  # stepwise selection
  X.reset_index(inplace=True)
  from sklearn.linear_model import LinearRegression
  from sklearn.cross_validation import KFold
  kf = KFold(X.shape[0], n_folds=5, random_state=0)

  Model1 = LinearRegression()
  SelectResult = forward_selected(X, Y, Model1, kf)
  Model1 = LinearRegression()
  Model1.fit(X[SelectResult[1]], Y)
  PredY0 = Model1.predict(X[SelectResult[1]])
  PredY = 0*YTest
  PredY[np.array(masked)] = Model1.predict(TeX[SelectResult[1]])

  # only invest in best stock
  Weight.ix[rowID-NTrain,] = 0
  Index = PredY.tolist().index(np.nanmax(PredY))
  Weight.ix[rowID-NTrain,Index] = 1

  # Weight.ix[rowID-21,] = 0
  # Weight.ix[rowID-21,Index[:N]] = -1
  # Weight.ix[rowID-21,Index[-N:]] = 1
  Weight.ix[rowID-NTrain,Price.ix[rowID,].isnull()] = 0
  Adj = LevLimit*Capital.ix[rowID-NTrain]/sum(abs(Price.ix[rowID,].fillna(0))*abs(Weight.ix[rowID-NTrain,]))
  Weight.ix[rowID-NTrain,] = Weight.ix[rowID-NTrain,]*Adj
  PnL.ix[rowID-NTrain] = np.nansum(Weight.ix[rowID-NTrain,]*Target.ix[rowID,]*Price.ix[rowID,])
  Ret.ix[rowID-NTrain] = PnL.ix[rowID-NTrain]/Capital.ix[rowID-NTrain,]
  Capital.ix[rowID-NTrain+1] = Capital.ix[rowID-NTrain] + PnL.ix[rowID-NTrain]

  masked = ~np.isnan(YTest)&~np.isnan(PredY)
  masked1 = ~np.isnan(Y)&~np.isnan(PredY0)

  Pf2.append([ss.spearmanr(YTest[masked],PredY[masked])[0], ss.spearmanr(Y[masked1],PredY0[masked1])[0], Ret.ix[rowID-NTrain]])
  TMP = ss.rankdata(Target.ix[rowID,])
  print Weight.columns.values[Index], Target.ix[rowID,Index], TMP[Index]
  # print BstPara

print np.nanmean(Pf2,axis=0), np.nanstd(Pf2,axis=0)
print Pf2
# print Weight.index
print Capital
